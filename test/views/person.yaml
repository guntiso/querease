name: person
table:  person
fields:
- id
- name
- surname
- sex
- mother_id
- father_id

name:   person_2
db:     querease2
table:  person
fields:
- id
- full_name:
  - initial: "'Name Surname'"
- notes = no_args_macro()

name:   person_2_ch
db:     querease2
table:  person
fields:
- id
- full_name:
  - initial: "'Name Surname'"
- children [false] :
    db:     querease2
    table:  person
    fields:
    - id
    - full_name

name:   person_accounts_2
db:     querease2
table:  person
fields:
- id
- accounts * :
    db:     querease2
    table:  account
    fields:
    - account_name

name:     person_with_parents_1
table:    person p
fields:
- id
- name
- surname
- sex
- mother :
    table:  person m
    fields:
    - id
    - name
    - surname
    - sex -> = coalesce(_, 'F')
- father :
    table:  person f
    fields:
    - id
    - name
    - surname
    - sex -> = coalesce(_, 'M')

name:  person_info
table: person p
fields:
- name
- surname
- sex
- mother.name
- father.name
- maternal_grandmother = mother.mother.name
- maternal_grandfather = mother.father.name
- paternal_grandmother = father.mother.name
- paternal_grandfather = father.father.name
- children * [p.id in (c.mother_id, c.father_id)] person_name
- father [f.id = p.father_id]:
    table:  person f
    fields:
      - name
      - surname
    order:  name
order:
- name
- surname

name:  person_father_save
table: person p
fields:
- name
- sponsor [f.id = p.father_id] -> person:father_id:
    table:  person f
    fields:
      - name

name:   person_name
table:  person c
fields: name
order:  name

name:  person_info_alt
table: person p
fields:
- name
- surname
- sex
- mother.name
- father.name
- maternal_grandmother = mother.mother.name
- maternal_grandfather = mother.father.name
- paternal_grandmother = father.mother.name
- paternal_grandfather = father.father.name
- children * [p.id in (c.mother_id, c.father_id)]:
    table:  person c
    fields: name
    order:  name
- father [f.id = p.father_id]:
    table:  person f
    fields:
      - name
      - surname
    order:  name
order:
- name
- surname

name:  siblings
table:
joins: (person p1 [p1.mother_id = p2.mother_id | p1.father_id = p2.father_id] person p2
        [p1.name != p2.name] {p1.name sibling1, p2.name sibling2}
        +
        person p1[(person p2[(p1.mother_id = p2.mother_id | p1.father_id = p2.father_id) & p1.id != p2.id])]
        {name, null}) x_
fields:
- sibling1
- x_.sibling2
order:
- sibling1
- null x_.sibling2

name:  siblings_alt
table: person p
joins: p[p.id = x_.id](person p1 [p1.mother_id = p2.mother_id | p1.father_id = p2.father_id] person p2
        [p1.name != p2.name] {p1.id, p2.name sibling2}
        +
        person p1[(person p2[(p1.mother_id = p2.mother_id | p1.father_id = p2.father_id) & p1.id != p2.id])]
        {p1.id, null}) x_
fields:
- sibling1 = name
- x_.sibling2
order:
- name
- null x_.sibling2

# hierarchy
name:  father_tree
table: person
fields:
- id
- name
- sons * [:1(id) = father_id] father_tree
filter:
- father_id = null # first filter is for selecting roots, it is dropped for child queries!
- sex = 'M'
order:
- name
- id


# FIXME eliminate father_id field from main query
# FIXME eliminate technical ref :1(..) to parent query
name:  with_forefathers
table: person p
fields:
- full_name = name || ' ' || surname
- father_id
- forefathers * [] :
    table:
    joins:
    - t(level, name, surname, father_id) {
        person f [f.id = :1(father_id)]   {1   level, name, surname, father_id}
        +
        t [t.father_id = ff.id] person ff {1 + level, ff.name, ff.surname, ff.father_id}
      }
      t
    fields:
    - full_name = name || ' ' || surname
    order:
    - level
order:
- surname
- name


name:     person_from_multiple_db_1
table:    person p
fields:
- id
- name
- surname
- other_db_person [p.id = p2.id] :
  - db:     querease2
  - table:  person p2
  - joins:
    - p2 [p2.full_name = p3.full_name] person p3
  - fields:
    - full_name
  - filter:
    - p2.full_name ~ '%o%'
- distraction * = :
  - table:
  - fields:
    - any
filter:
- id < 2000


name:     person_from_multiple_db_2
db:       querease2
table:    person p
fields:
- id
- full_name
- other_db_person [p.id = p2.id] :
  - db:
  - table:  person p2
  - joins:
    - p2 [p2.name = p3.name & p2.surname = p3.surname] person p3
  - fields:
    - name
    - surname
  - filter:
    - p2.surname ~ '%o%'


name:     person_with_complex_type_resolvers_1
table:    person p
fields:
- id
- name
- surname
- sex
- mother [p.mother_id = m.id] -> mother_id = person[name = :mother.name & surname = :mother.surname]{id} :
    table:  person m
    fields:
    - name
    - surname
    - sex -> = coalesce(_, 'F')
- father -> = person[name = :father.name & surname = :father.surname]{id} :
    table:  person f
    fields:
    - name
    - surname
    - sex -> = coalesce(_, 'M')

name:     person_with_complex_type_resolvers_2
table:    person p
fields:
- id
- name
- surname
- sex
- father [p.father_id = f.id] -> = person[name = :father.name & surname = :father.surname & !:father.is_resolver_disabled?]{id} :
    table:  person f
    save-to:
    fields:
    - name
    - surname
    - sex -> = coalesce(_, 'M')


name: person_choice_without_resolver
table: person
fields:
- full_name = name || ' ' || surname || ' (#1)'

name: person_choice_resolver_implied
table: person
fields:
- full_name = name || ' ' || surname || ' (#2)' -> id

name: person_choice_resolver_provided
table: person
fields:
- full_name = name || ' ' || surname || ' (#3)' -> id = person[name || ' ' || surname || ' (#4)' = _]{id}

name: person_multifield_choice_resolver_implied
table: person
fields:
- name
- full_name = name || ' ' || surname || ' (#5)' -> id

name: person_multifield_choice_resolver_provided
table: person
fields:
- name
- full_name = name || ' ' || surname || ' (#6)' -> id = person[name || ' ' || surname || ' (#7)' = _]{id}

name: person_multitable_choice_resolver_implied_1
table: person
fields:
- full_name = name || ' ' || surname || ' of ' || father.name || ' (#7)'

name: person_multitable_choice_resolver_implied_2
table: person p1
fields:
- full_name = name || ' ' || surname || ' of ' || father.name || ' (#8)'

name: resolver_test_person_1
table: person
fields:
- id
- mother = mother.name || mother.surname -> mother_id
- father = father.name || father.surname -> father_id = person[name || surname = _]{id}

name: resolver_test_person_2
table: person p2
fields:
- id
- mother = ^person_choice_without_resolver.full_name[p2.mother_id]
- father = ^person_choice_without_resolver.full_name[id = p2.father_id] -> father_id
- empty_expression_test =

name: ref_expression_test_person_2b
table: person p2
fields:
- id
- mother = ^person_choice_without_resolver.full_name -> mother_id
- father = ^person_choice_without_resolver.full_name -> father_id

name: ref_expression_test_person_2c
table: person p2
fields:
- id
- mother = ^person_choice_without_resolver.full_name
- father = ^person_choice_without_resolver.full_name

# resolver reuse
name: resolver_test_person_3
table: person p3
fields:
- id
- mother = ^person_choice_resolver_implied.full_name[p3.mother_id = id + 3] -> mother_id
- father = ^person_choice_resolver_provided.full_name -> father_id

# resolver override
name: resolver_test_person_4
table: person
fields:
- id
- mother = ^person_choice_resolver_implied.full_name -> mother_id = 1
- father = ^person_choice_resolver_provided.full_name -> father_id = 2

# resolver reuse (multifield choice)
name: resolver_test_person_5
table: person p5
fields:
- id
- mother = ^person_multifield_choice_resolver_implied.full_name[p5.mother_id = id + 5] -> mother_id
- father = ^person_multifield_choice_resolver_provided.full_name -> father_id

# resolver override (multifield choice)
name: resolver_test_person_6
table: person p6
fields:
- id
- mother = ^person_multifield_choice_resolver_implied.full_name -> mother_id = 3
- father = ^person_multifield_choice_resolver_provided.full_name -> father_id = 4

# refarenced resolver with multiple table expression
name: resolver_test_person_7
table: person p7
fields:
- mother = ^person_multitable_choice_resolver_implied_1.full_name ->

name: resolver_test_person_8
table: person p8
fields:
- mother = ^person_multitable_choice_resolver_implied_2.full_name ->

name: resolver_test_person_9_a
table: person p9
fields:
- name
- mother_id -> = person[name = :name & surname = :surname & :type = 'person']{id}

name: resolver_test_person_9_b
table: person p9
fields:
- name
- mother_id -> = person[name = :name & surname = :surname & :'creative param name' = 'person']{id}

name: resolver_test_person_9_c
table: person p9
fields:
- name
- mother_id -> = person[name = :name & surname = :surname & :'creative.param.name' = 'person']{id}

name: resolver_test_person_10
table: person p10
fields:
- name
- id -> = person[name = :name]{id}
filter:
- name

name: resolver_test_person_11
table: person p11
fields:
- name
- id -> = person[name = :name]{nullif(0, 0) id}

name: resolver_test_person_12_a
table: person p12a
fields:
- id
- father = father.name -> = person[name = _ & id > :id]{id}

name: resolver_test_person_12_b
table: person p12b
fields:
- id
- father = father.name -> = person[name = _ & :id > 0 & id > :id]{id}

name: resolver_test_person_12_c
table: person p12c
fields:
- id
- father = father.name -> = person[name = :father & :id > 0 & id > :id]{id}

# test alias clash resolvement in implicit resolver joins
name: resolver_alias_clash_test_person_7_a
table: person
fields:
- mother = ^person_multitable_choice_resolver_implied_1.full_name ->

name: resolver_alias_clash_test_person_8_a
table: person p1
fields:
- mother = ^person_multitable_choice_resolver_implied_2.full_name ->

name: resolver_alias_clash_test_person_8_b
table: person father
fields:
- mother = ^person_multitable_choice_resolver_implied_2.full_name ->

# test ambiguity resolver - using default ref table alias or 'this'
name: ambiguity_resolver_test_person_1
table: person p1
fields:
- this_name = ^person_choice_without_resolver.full_name [ this ]
- fath_name = ^person_choice_without_resolver.full_name [father]
- moth_name = ^person_choice_without_resolver.full_name [mother]
- mother    = ^person_choice_without_resolver.full_name -> father_id
- ma        = ^person_choice_without_resolver.full_name -> mother_id

# test resolver in resolver
name: optional_params_resolver_test_1
table: person p1
fields:
- id
- mother_id -> = coalesce(if_defined_or_else(:mother_id?, :mother_id::bigint, :father_id::bigint), if_defined_or_else(:id?, :id?::bigint, -1))
- father_id -> = person[id = coalesce(:father_id, if_defined_or_else(:mother_id?, :mother_id, null), if_defined_or_else(:id?, :id?, null))]{id}

# test resolver in resolver
name: nested_resolver_test_1
table: person
fields:
- other_field =
- mother = ^person_multitable_choice_resolver_implied_1.full_name -> = ^person_multitable_choice_resolver_implied_1[^full_name = :mother & father_id = ^person_multitable_choice_resolver_implied_2[:other_field = ^full_name]{id}]{id}

# test resolver in filter
name: filter_with_resolver_test_1
table: person
fields:
- name
filter:
- mother_id = ^resolver_test_person_1[if_defined_or_else(:mother?, ^mother = :mother & id::text ~ '%6', false)]{mother_id}

name: filter_with_resolver_test_2
table: person
fields:
- name
filter:
- person[mother_id = ^person_choice_without_resolver[^full_name = :mother?]{id}]{1}

name: filter_with_resolver_test_3_a
table: person
fields:
- name
filter:
- mother_id = ^resolver_test_person_1[^mother = :mother]{min(mother_id)}

name: filter_with_resolver_test_3_b
table: person
fields:
- name
filter:
- mother_id = (^resolver_test_person_1[^mother = :mother]{mother.id}) x {min(id)}

name: filter_with_resolver_test_4
table: person
fields:
- name
filter:
- mother_id = ^person_choice_without_resolver[^full_name = :mother?]{id}

# test field-ref in filter
name: filter_with_field_ref_test_1
table: person
fields:
- full_name = name || ' ' || surname
filter:
- ^full_name

name: filter_with_field_ref_test_2
table: person
fields:
- full_name = name || ' ' || surname
filter:
- ^full_name = :full_name

name: filter_with_field_ref_test_3
table: person
fields:
- full_name = ^filter_with_field_ref_test_1.full_name[this]
filter:
- ^full_name = :full_name

name: filter_with_field_ref_test_4
table: person p1
fields:
- full_name = ^filter_with_field_ref_test_1.full_name[this]
filter:
- ^full_name = :full_name

name: filter_with_field_ref_test_5
table: person p1
fields:
- father_full_name = ^filter_with_field_ref_test_1.full_name[father]
filter:
- ^filter_with_field_ref_test_1.full_name[this] = :full_name

name: filter_with_field_ref_test_6
table: person p1
fields:
- full_name = ^filter_with_field_ref_test_1.full_name[this]
filter:
- ^filter_with_field_ref_test_1.full_name[father] = :full_name

name: filter_with_field_ref_test_7
table: person p1
fields:
- full_name = ^filter_with_field_ref_test_1.full_name[this]
filter:
- ^filter_with_field_ref_test_1.full_name[this] = :full_name

name: resolver_override_test_01
extends: resolver_test_person_11
fields:
- name -> name = person[name = _]{'X' name}
- id   ->   id = person[name = :name || 'X']{nullif(0, 0) id}

name: resolver_override_test_02
extends: resolver_test_person_11
fields:
- id = 0

name: resolver_override_test_03
extends: resolver_override_test_02
fields:
- id   ->   id = person[name = :name || 'Y']{nullif(0, 0) id}

name: resolver_override_test_04
extends: resolver_override_test_03
fields:
- id   ->   id = person[name = :name || :id || 'Z']{nullif(0, 0) id}

name: resolver_override_test_05
extends: resolver_override_test_04
fields:
- id   ->   id = person[name = :name || :unknown_id]{nullif(0, 0) id}

name: resolver_override_test_06
extends: resolver_override_test_05
fields:
- id   ->   id = person[name = :name || :other_unknown_id]{nullif(0, 0) id}

name: resolver_test_scala_escapes_01
table: person
fields:
- name -> name = case(:name `~` '^\d+$', 'dig-only - ' || :name, 'not-dig-only - ' || :name)

name:   save_to_multi_test_01
table:  sys_user u
save-to:
- person
- sys_user
joins:
- u / person p_
fields:
- id
- p_.name
- p_.sex -> = 'M'
- password

name:   save_extra_props_test_01
table:  sys_user u
fields:
- id

name:   mother
table:  person m
fields:
- id
- name
- sex -> = 'F'
- daughters * [m.id = d.mother_id] :
    table:    person d
    save-to:  person:mother_id    # Ambiguous references resolved for save
    fields:
    - name
    - sex -> sex = 'F'
    filter:
    - sex = 'F'
filter:
- sex = 'F'


name:   ro_child_ref_clash_test
table:  sys_user u
fields:
- id
- person [!] person
- person_id


name:    person_recursive_test_1
table:   person
fields:
- id
- name
- surname
- sex
# TODO support save and get with implied join to parent, add clean test
- mother [(person[:1(id) = id]{mother_id}) = id] person_recursive_test_1


name:    person_recursive_test_2
table:   person
save-to: person:mother_id[id]  # TODO extract this info from join to parent, add clean test
fields:
- id
- name
- surname
- sex
- children * [:1(id) = mother_id] person_recursive_test_2
